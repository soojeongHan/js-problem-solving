====Question====
https://www.hackerrank.com/challenges/two-characters/problem

====Answer====
function alternate(s) {
    let arr = countAlphabet(s, s.length); 
    
    let maxLengthLetters = 0; 
    const N = arr.length;
    for(let i = 0; i < N-1; i++) {
        const key = arr[i][0];
        const value = arr[i][1];
        
        let j = i+1;
        while(j < N) {
            if(value - arr[j][1] > 1) break; 
            const stack = containsTwoAlternatingLetters(s, key, arr[j][0]);
            if(stack.length === value+arr[j][1] ) {
                maxLengthLetters = Math.max(stack.length, maxLengthLetters);
            }
            j++;
        }
    }
    return maxLengthLetters;
}

function containsTwoAlternatingLetters(s, firstKey, secondKey) {
    const N = s.length;
    const stack = [];
    let lastElement = "";
    for(let i = 0; i < N; i++) {
        if(s[i] === firstKey && lastElement !== firstKey) {
            stack.push(s[i]);
            lastElement = firstKey;
        }
        else if(s[i] === secondKey && lastElement !== secondKey) {
            stack.push(s[i]);
            lastElement = secondKey;
        } 
    }
    console.log(stack);
    return stack;
}

function countAlphabet(s, N) {
    const map = new Map();
    for(let i = 0; i < N; i++) {
        const key = s[i];
        if(!map.has(key)) {
            map.set(key, 1);
        }
        else map.set(key, map.get(key)+1);
    }
    
    return Array.from(map).sort((i,j)=> j[1]-i[1]);
}

====Comment====
C++ : http://anothercasualcoder.blogspot.com/2016/10/two-characters-by-hackerrank.html
JAVA : https://studyalgorithms.com/string/hackerrank-two-characters/
Python : https://velog.io/@leejh3224/HackerRank-Two-Characters

Java로 처리한 사람은 알파벳의 길이 => 26^2로 이차원 배열을 만들었다.
동일한 길이의 이차원 pair, count 배열을 이용하여, Row, Column에 대한 값을 처리하고
마지막에 count 배열의 모든 값을 순회하여 가장 높은 값을 출력한다.

아래와 같은 방법도 있다. 
문자열 s = "beabeefeab" 라고 하자.
Set을 이용하여 중복되는 값을 골라내고, 짝이 되는 알파벳을 추출한다.
=> b,e,a,f => [b,e], [b,a], [b,f], [e,a], [e,f], [a,f]
짝으로 이루어진 알파벳 배열을 순회한다.
  문자를 배열로 만들어, 짝으로 이루어진 알파벳 배열만을 골라내어 문자로 합친다.
  ex) beabeefeab => [b,e,a,b,e,e,f,e,a,b], [b,e] => [b,e,b,e,e,e,b] => "bebeeeb"
  그리고 정규식을 이용하여 String에서 연속으로 붙는 글자를 골라내고, 없다면 글자의 길이와 반환할 값 중 가장 큰 값을 비교하여 대입한다.

function alternate(s) {
    let maxlen = 0;
    const combinations = [];
    
    console.log(...new Set(s));
    [...new Set(s)].forEach((v, i, a) => {
        a.slice(i + 1).forEach(v1 => {
            combinations.push([v, v1]);
        })
    });
    console.log(combinations)
    combinations.forEach(comb => {
        let t = [...s].filter(v => comb.includes(v)).join('');
        
        console.log([...s].filter(v => comb.includes(v)));
        if (t.match(/(.)\1/) === null) {
            maxlen = Math.max(maxlen, t.length)
        }
    })
    return maxlen;
}