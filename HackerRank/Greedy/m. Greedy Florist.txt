====Question====
https://www.hackerrank.com/challenges/greedy-florist/problem
====Answer====
function getMinimumCost(k, c) {
    return c.sort((i,j) => j-i).reduce((preValue, curValue, index) => 
        preValue += (curValue * (Math.trunc(index/k)+1))
    , 0);
}
====Comment====
문제는 어떤 그룹은 꽃 다발을 모두 사려고하고, 꽃을 파는 판매자는 얻을 수 있는 금액을 최대로 얻을려고 한다.
주어지는 요소 중 k는 꽃다발을 구매하려는 그룹의 인원을 말하며, c는 판매할 수 있는 꽃다발의 금액이 배열로 되어있다.
original price * (previous purchases * current purchase) 금액으로 구매할 수 있는데 자세한 내용은 링크를 통해서 보면 된다.

예를 들어, n = [1,3,5,6,7,9,10,11,12,13], k = 3이라고 하자,

1. 내림차순으로 정렬한다.

2. n=10, k=3이기 때문에,
(0 + 1) * 13 = 13
(0 + 1) * 12 = 12
(0 + 1) * 11 = 11

13, 12, 11은 원래 가격으로 구매를 하고,
나머지 갯수를 k만큼 나누어서 모두 구매를 해야 한다.
(누군가 하나 더 구매해야하는데, 누가 구매하는 지는 이 문제에서 중요하지않다.)

(1 + 1) * 10  = 20 (이미 13을 구매했기 때문에, previous purchases에 1을 더한다.)
(1 + 1) * 9 = 18
(1 + 1) * 7 = 14
(2 + 1) * 6 = 18
(2 + 1) * 5 = 15
(2 + 1) * 3 = 9
(3 + 1) * 1 = 4

첫번째 사람은 13,10,6,1을 구매하고,
두번째 사람은 12,9,5를 구매하고,
세번째 사람은 11,7,3을 구매한다.

그래서 위의 결과의 총합을 더해서 134를 반환하면 된다.