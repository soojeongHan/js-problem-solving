====Question====
https://www.hackerrank.com/challenges/beautiful-pairs/problem
====Answer====
function beautifulPairs(A, B) {
    const N = A.length;
    const MAX_NUMBER = 1000;
    const bool = A.reduce((preValue, curValue) => {
        preValue[curValue]++;
        return preValue;
    }, new Array(MAX_NUMBER+1).fill(0));
    const count = B.reduce((preValue, curValue) => {
        if(bool[curValue]) {
            preValue++;
            bool[curValue]--;
        }
        return preValue;
    } , 0)
    return count === N ? count-1 : count+1;
}
====Comment====
A와 B의 요소 중에서 쌍을 이루는 값을 찾아내는데,
해당 요소가 한번 짝을 이루면, 다른 짝과 이룰 수 없다.
A=[1,2,3,4] B=[1,2,3,3]에서
쌍을 이루면 [(0,0), (1,1), (2,2), (2,3)]이지만, 
A의 index 2은 B의 index 2, 3와 짝을 이루기때문에 [(0,0), (1,1), (2,2)] or [(0,0), (1,1), (2,3)] 둘 중 하나를 선택해야 한다.
1. 최대값은 1000이기 때문에, 길이가 1000인 배열을 이용하여 A의 배열의 값마다 매칭하여 값을 증가시켰다.
2. B의 배열을 순회하여, 해당 값이 bool 배열 인덱스가 1 이상이면 값을 1을 빼주고, 결과값을 1을 증가시켰다.
3. 결국 B의 배열 중 하나를 변경해야해서, 모두가 쌍을 이루면 1을 빼고, 쌍을 이루지못하면 1을 더해서 반환시킨다.