====Answer====
const createFailStages = (N, stages) => {
    return stages.reduce((r,v) => {
        return v <= N ? (++r[v-1], r) : r;
    }, new Array(N).fill(0))
}
const solution = (N, stages) => {
    // 실패율을 구하라 : 스테이지 도달 O 클리어 X 플레이어 수 / 스테이지 도달 O 플레이어 수
    // N : 전체 스테이지의 수
    // stages : 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages
    // return : 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열
    const length = stages.length;
    const array = createFailStages(N, stages);
    return array
        .reduce((r, v, i) => {
            return (r.arr[i].failRate = v/(length-r.sum)
                    ,r.sum+=v
                    ,r);
            }, 
           { sum : 0, arr : new Array(N).fill({}).map((_, i) => { return {id : i+1, failRate : 0}})}).arr
        .sort((i,j) => j.failRate === i.failRate ? i.id-j.id : j.failRate-i.failRate)
        .map((v) => v.id);
}
====Comment====
아래의 정확성 테스트에서 내 풀이가 22ms걸리는 풀이가 있길래,
시간복잡도에서 문제가 있었나 문제에 대해서 계속 고민해봤다. 

생각나지않아서 다른 사람이 푼 풀이를 실행하고 분석해봤지만, 다른 사람의 풀이에서도 오래걸리는 케이스라 넘겼다.
constraint : 1) 1 <= N <= 500
                2) 1 <= stages.length <= 200,000
제약조건을 최대로 설정하면 200,000,000을 최대로 볼 수 있다.

정확성  테스트
테스트 1 〉	통과 (0.26ms, 30.2MB)
테스트 2 〉	통과 (0.39ms, 30MB)
테스트 3 〉	통과 (1.78ms, 30.5MB)
테스트 4 〉	통과 (4.02ms, 34MB)
테스트 5 〉	통과 (5.88ms, 36.9MB)
테스트 6 〉	통과 (0.59ms, 30.2MB)
테스트 7 〉	통과 (1.39ms, 30.1MB)
테스트 8 〉	통과 (4.08ms, 34.4MB)
테스트 9 〉	통과 (22.02ms, 36.7MB)
테스트 10 〉	통과 (17.70ms, 33.9MB)
테스트 11 〉	통과 (4.08ms, 34.3MB)
테스트 12 〉	통과 (4.90ms, 35.3MB)
테스트 13 〉	통과 (5.16ms, 35.7MB)
테스트 14 〉	통과 (0.28ms, 29.9MB)
테스트 15 〉	통과 (3.11ms, 33.7MB)
테스트 16 〉	통과 (2.79ms, 32.7MB)
테스트 17 〉	통과 (3.36ms, 33.7MB)
테스트 18 〉	통과 (2.69ms, 32.7MB)
테스트 19 〉	통과 (1.05ms, 30.2MB)
테스트 20 〉	통과 (13.45ms, 32.5MB)
테스트 21 〉	통과 (3.89ms, 33.9MB)
테스트 22 〉	통과 (5.96ms, 36.8MB)
테스트 23 〉	통과 (5.56ms, 36.3MB)
테스트 24 〉	통과 (5.56ms, 36.2MB)
테스트 25 〉	통과 (0.23ms, 30.3MB)
테스트 26 〉	통과 (0.20ms, 29.8MB)
테스트 27 〉	통과 (0.20ms, 29.9MB)
채점 결과
정확성: 100.0
합계: 100.0 / 100.0