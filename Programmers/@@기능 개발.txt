====Answer====
const solution = (progresses, speeds) => {
    const success = 100;
    // progresses : [93, 30, 55], speeds : [1, 30, 5] => array : [7, 3, 9]
    const array = progresses.map((progress,i) => Math.ceil((success-progress) / speeds[i]));
    
    return array.reduce((r, v) => {
        return !r.length || r[r.length-1].progress < v 
            ? (r.push({count : 1, progress : v,}), r)
            : (++r[r.length-1].count, r);
    }, [])
        .map(v => v.count);
}
====Comment====
Math.ceil(진도 완료율(100%) - 작업 진도(progress)) / 작업 속도(speed)로 배열의 값마다 대입한다.
배열이 비어있거나, 배열의 마지막 값의 progress가 날짜보다 작으면 배열에 객체를 삽입한다.
그 외의 경우에는 count에 값을 하나 증가시키고, 배열을 반환한다.

자세히 설명하면, 
progresses : [93, 30, 55], speeds : [1, 30, 5] => array : [7, 3, 9]로 변환한다.
progresses의 각 값은 완료되는 날과 같다.
순서대로 계산해야하므로, 내장 함수인 reduce를 이용하여 progresses 배열을 순회한다.
순회할 때 앞선 기능 개발이 끝나야하므로,
앞선 기능 개발이 끝나는 날짜가 다음 날짜보다 크면 앞선 기능 개발이 끝나는 날짜에 함께 배포한다.
앞선 기능 개발이 끝나는 날짜가 다음 날짜보다 작거나 같으면, 다음 날짜를 배열에 넣는다.