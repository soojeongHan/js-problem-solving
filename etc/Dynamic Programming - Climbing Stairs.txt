// Brute Force
const climbStairs = (n) => {
    const climb_Stairs = (i, n) => {
        if(i > n) return 0;
        if(i === n) return 1;
        return climb_Stairs(i+1, n) + climb_Stairs(i+2, n);    
    }
    return climb_Stairs(0, n);
};

// Recursion with Memoization
const climbStairs = (n) => {
    const climb_Stairs = (i, n, memo) => {
        if(i > n) return 0;
        if(i === n) return 1;
        if(memo[i] > 0) return memo[i];
        memo[i] = climb_Stairs(i+1, n, memo) + climb_Stairs(i+2, n, memo);
        return memo[i];
    }
    const memo = new Array(n);
    return climb_Stairs(0, n, memo);
};

// Dynamic Programming
const climbStairs = (n) => {
    if(n === 1) return 1;
    const dp = new Array(n+1);
    dp[1] = 1;
    dp[2] = 2;
    for(let i = 3; i <= n; i++) {
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
};