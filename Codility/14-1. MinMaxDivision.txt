====Question====
You are given integers K, M and a non-empty array A consisting of N integers. Every element of the array is not greater than M.

You should divide this array into K blocks of consecutive elements. The size of the block is any integer between 0 and N. Every element of the array should belong to some block.

The sum of the block from X to Y equals A[X] + A[X + 1] + ... + A[Y]. The sum of empty block equals 0.

The large sum is the maximal sum of any block.

For example, you are given integers K = 3, M = 5 and array A such that:

  A[0] = 2
  A[1] = 1
  A[2] = 5
  A[3] = 1
  A[4] = 2
  A[5] = 2
  A[6] = 2
The array can be divided, for example, into the following blocks:

[2, 1, 5, 1, 2, 2, 2], [], [] with a large sum of 15;
[2], [1, 5, 1, 2], [2, 2] with a large sum of 9;
[2, 1, 5], [], [1, 2, 2, 2] with a large sum of 8;
[2, 1], [5, 1], [2, 2, 2] with a large sum of 6.
The goal is to minimize the large sum. In the above example, 6 is the minimal large sum.

Write a function:

function solution(K, M, A);

that, given integers K, M and a non-empty array A consisting of N integers, returns the minimal large sum.

For example, given K = 3, M = 5 and array A such that:

  A[0] = 2
  A[1] = 1
  A[2] = 5
  A[3] = 1
  A[4] = 2
  A[5] = 2
  A[6] = 2
the function should return 6, as explained above.

Write an efficient algorithm for the following assumptions:

N and K are integers within the range [1..100,000];
M is an integer within the range [0..10,000];
each element of array A is an integer within the range [0..M].
====Answer====
function solution(K, M, A) {
    // lowerBound : array A의 값 중에서 가장 큰 값
    // upperBound : array A의 값을 모두 더 한 값
    let lowerBound = A.reduce((acc, max) => Math.max(acc, max));
    let upperBound = A.reduce((acc, sum) => sum+=acc)
    
    // check Constraint
    // K가 1일 때, Return upperBound 
    // K가 A의 길이보다 크거나 같을 때, Return lowerBound  
    if(K === 1) return upperBound;
    if(K >= A.length) lowerBound;
    
    let expected = 0;
    let result = 0;
    let available = false;
    
    while(lowerBound <= upperBound) {
        expected = Math.trunc((lowerBound+upperBound) / 2);
        available = isDivided(expected, K, A);
        if(available) {
            upperBound = expected - 1;
            result = expected;
        }
        else lowerBound = expected + 1;
    }
    return result;
}

function isDivided(expected, K, A) {
    let sum = A[0];
    let block = 1;
    
    for(let i = 1; i < A.length; ++i) {
        if(sum + A[i] > expected) {
            sum = A[i];
            ++block;
        }
        else sum += A[i];
        if(block > K) return false;
    }
    return true;
}
====Comment====
Detected time complexity:
O(N*log(N+M))
https://app.codility.com/demo/results/trainingMSR6DE-776/

아래 링크를 참고하여, 자바스크립트로 작성하였다. 여러 방면으로 풀어보았지만, 시간복잡도 면에서 통과할 수 없어 참고하였다.
Link : http://dal4segno.github.io/algorithm/codility-14-binary-search-algorithm/