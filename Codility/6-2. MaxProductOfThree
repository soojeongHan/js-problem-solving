====Question====

A non-empty array A consisting of N integers is given. The product of triplet (P, Q, R) equates to A[P] * A[Q] * A[R] (0 ≤ P < Q < R < N).

For example, array A such that:

  A[0] = -3
  A[1] = 1
  A[2] = 2
  A[3] = -2
  A[4] = 5
  A[5] = 6
contains the following example triplets:

(0, 1, 2), product is −3 * 1 * 2 = −6
(1, 2, 4), product is 1 * 2 * 5 = 10
(2, 4, 5), product is 2 * 5 * 6 = 60
Your goal is to find the maximal product of any triplet.

Write a function:

function solution(A);

that, given a non-empty array A, returns the value of the maximal product of any triplet.

For example, given array A such that:

  A[0] = -3
  A[1] = 1
  A[2] = 2
  A[3] = -2
  A[4] = 5
  A[5] = 6
the function should return 60, as the product of triplet (2, 4, 5) is maximal.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [3..100,000];
each element of array A is an integer within the range [−1,000..1,000].


====Answer====
function solution(A) {
    A.sort((a,b) => a-b);
    const lengthOfA = A.length-1;
    return A[0]*A[1]*A[lengthOfA] > A[lengthOfA]*A[lengthOfA-1]*A[lengthOfA-2] ? 
           A[0]*A[1]*A[lengthOfA] : A[lengthOfA]*A[lengthOfA-1]*A[lengthOfA-2] ;
}
Detected time complexity:
O(N * log(N))
====Comment====
A배열 안의 값은 -1000~1000까지이고, 배열의 길이는 3~100,000이다.
A배열의 길이가 3인 경우는 그냥 곱해서 바로 리턴하는 것도 괜찮지만, 어차피 길이가 3이면 정렬해서 곱하는 시간도 비슷하다.
그렇게 되면 
    const lengthOfA = A.length-1;
    if(lengthOfA === 2) return A[0]*A[1]*A[2];
