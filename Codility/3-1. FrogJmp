====Question====

A small frog wants to get to the other side of the road. The frog is currently located at position X and wants to get to a position greater than or equal to Y. The small frog always jumps a fixed distance, D.

Count the minimal number of jumps that the small frog must perform to reach its target.

Write a function:

function solution(X, Y, D);

that, given three integers X, Y and D, returns the minimal number of jumps from position X to a position equal to or greater than Y.

For example, given:

  X = 10
  Y = 85
  D = 30
the function should return 3, because the frog will be positioned as follows:

after the first jump, at position 10 + 30 = 40
after the second jump, at position 10 + 30 + 30 = 70
after the third jump, at position 10 + 30 + 30 + 30 = 100
Write an efficient algorithm for the following assumptions:

X, Y and D are integers within the range [1..1,000,000,000];
X ≤ Y.

====Answer====

function solution(X, Y, D) {
    let answer = Math.trunc((Y-X) / D);
    if((Y-X) % D !== 0) answer++;
    return answer;
}

/* Comment

1. 주어진 숫자 중에서 크거나 같은 숫자 중에서 작은 숫자를 반환하는 Math.ceil을 사용하는 경우
public int solution(int X, int Y, int D) {
    return (int) Math.ceil((Y - X) / (double) D);
}
출처: https://stroot.tistory.com/88 [Strong Root]

*/
