====Question====

We draw N discs on a plane. The discs are numbered from 0 to N − 1. An array A of N non-negative integers, specifying the radiuses of the discs, is given. The J-th disc is drawn with its center at (J, 0) and radius A[J].

We say that the J-th disc and K-th disc intersect if J ≠ K and the J-th and K-th discs have at least one common point (assuming that the discs contain their borders).

The figure below shows discs drawn for N = 6 and A as follows:

  A[0] = 1
  A[1] = 5
  A[2] = 2
  A[3] = 1
  A[4] = 4
  A[5] = 0

There are eleven (unordered) pairs of discs that intersect, namely:

discs 1 and 4 intersect, and both intersect with all the other discs;
disc 2 also intersects with discs 0 and 3.
Write a function:

function solution(A);

that, given an array A describing N discs as explained above, returns the number of (unordered) pairs of intersecting discs. The function should return −1 if the number of intersecting pairs exceeds 10,000,000.

Given array A shown above, the function should return 11, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..100,000];
each element of array A is an integer within the range [0..2,147,483,647].


====Answer====
function solution(A) {
    // write your code in JavaScript (Node.js 8.9.4)
    const N = A.length;
    let array = new Array();
    let answer = 0;
    
    for(let i = 0; i < N; i++) {
        let circle = {
            left: i - A[i],
            right: i + A[i]
        }
        array.push(circle);
    }
    
    array.sort((a,b) => a.left - b.left);
    
    for(let i = 0; i < N; i++) {
        for(let j = i+1; j < N; j++) {
            if(array[i].right < array[j].left) break;
            if(array[i].left <= array[j].left && array[i].right >= array[j].left) {
                answer++;
            }
        }
    }
    
    return answer > 10000000 ? -1 : answer;
}
Detected time complexity:
O(N*log(N)) or O(N)

====Comment====
계속 O(N^2)되는 알고리즘만 구현하다가, 왼쪽으로 정렬시켜 비교하는 다른 사람의 문제 풀이를 참고하여 구현하였다.
