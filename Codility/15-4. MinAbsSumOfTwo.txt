====Question====
Let A be a non-empty array consisting of N integers.

The abs sum of two for a pair of indices (P, Q) is the absolute value |A[P] + A[Q]|, for 0 ≤ P ≤ Q < N.

For example, the following array A:

  A[0] =  1
  A[1] =  4
  A[2] = -3
has pairs of indices (0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2).
The abs sum of two for the pair (0, 0) is A[0] + A[0] = |1 + 1| = 2.
The abs sum of two for the pair (0, 1) is A[0] + A[1] = |1 + 4| = 5.
The abs sum of two for the pair (0, 2) is A[0] + A[2] = |1 + (−3)| = 2.
The abs sum of two for the pair (1, 1) is A[1] + A[1] = |4 + 4| = 8.
The abs sum of two for the pair (1, 2) is A[1] + A[2] = |4 + (−3)| = 1.
The abs sum of two for the pair (2, 2) is A[2] + A[2] = |(−3) + (−3)| = 6.
Write a function:

function solution(A);

that, given a non-empty array A consisting of N integers, returns the minimal abs sum of two for any pair of indices in this array.

For example, given the following array A:

  A[0] =  1
  A[1] =  4
  A[2] = -3
the function should return 1, as explained above.

Given array A:

  A[0] = -8
  A[1] =  4
  A[2] =  5
  A[3] =-10
  A[4] =  3
the function should return |(−8) + 5| = 3.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].

====Wrong Answer====
function solution(A) {
    const N = A.length;
    if(N === 1) return Math.abs(A[0]+A[0]);
    A.sort((i,j)=> i-j);
    
    let minSum = Number.MAX_VALUE;
    
    for(let i = 0; i < N; i++) {
        let j = i;
        while(j < N && A[i] <= Math.abs(A[j])) {
            if(minSum > Math.abs(A[i]+A[j])) minSum = Math.abs(A[i]+A[j]);
            j++;
        }
    }
    
    return minSum;
}
Correctness : 100%이지만, Time Complexity가 N^2로 시간이 오래 걸린다.
====Answer====
function solution(A) {
    const N = A.length;
    if(N === 1) return Math.abs(A[0]+A[0]);
    A.sort((i,j)=> i-j);
    
    let minSum = 2000000000;
    let front = 0;
    let back = N-1;
    while(front <= back) {
        const currentSum = A[front]+A[back];
        minSum = Math.min(minSum, Math.abs(currentSum));
        currentSum <= 0 ? front++ : back--;
    }
    
    return minSum;
}
====Comment====
Detected time complexity:
O(N * log(N))
https://app.codility.com/demo/results/trainingX6GUNU-B6A/