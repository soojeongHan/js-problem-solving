====Question====
An array A consisting of N integers is given. A triplet (P, Q, R) is triangular if it is possible to build a triangle with sides of lengths A[P], A[Q] and A[R]. In other words, triplet (P, Q, R) is triangular if 0 â‰¤ P < Q < R < N and:

A[P] + A[Q] > A[R],
A[Q] + A[R] > A[P],
A[R] + A[P] > A[Q].
For example, consider array A such that:

  A[0] = 10    A[1] = 2    A[2] = 5
  A[3] = 1     A[4] = 8    A[5] = 12
There are four triangular triplets that can be constructed from elements of this array, namely (0, 2, 4), (0, 2, 5), (0, 4, 5), and (2, 4, 5).

Write a function:

function solution(A);

that, given an array A consisting of N integers, returns the number of triangular triplets in this array.

For example, given array A such that:

  A[0] = 10    A[1] = 2    A[2] = 5
  A[3] = 1     A[4] = 8    A[5] = 12
the function should return 4, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..1,000];
each element of array A is an integer within the range [1..1,000,000,000].

====Answer====
function solution(A) {
    const N = A.length;
    
    if(N <= 2) return 0;
    
    A.sort((i,j)=> i-j);
    
    let countTriangular = 0;
    
    for(let x = 0; x < N-2; x++) {
        let z = x+2;
        for(let y = x+1; y < N-1; y++) {
            while(z < N && A[x]+A[y] > A[z]) {
                z++;
            }
            countTriangular += z-y-1;
        }
    }
    return countTriangular;
}

====Comment====
Detected time complexity:
O(N**2)
https://app.codility.com/demo/results/trainingWX63B3-773/