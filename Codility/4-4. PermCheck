====Question====
A non-empty array A consisting of N integers is given.

A permutation is a sequence containing each element from 1 to N once, and only once.

For example, array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
is a permutation, but array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
is not a permutation, because value 2 is missing.

The goal is to check whether array A is a permutation.

Write a function:

function solution(A);

that, given an array A, returns 1 if array A is a permutation and 0 if it is not.

For example, given array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
the function should return 1.

Given array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
the function should return 0.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [1..1,000,000,000].

====Answer====

function solution(A) {
    let answer = 1; 
    A.sort((a,b) => a-b);
    for(let i = 0, len = A.length; i < len; i++) {
        if(A[i] === answer) answer++;
        else return 0;
    }
    return 1;
}

====Comment====

전 문제와 비슷한 유형의 문제라 5분내로 바로 풀고, 에러가 날지 테스트를 진행하였다.
