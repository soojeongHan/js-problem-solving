====Question====
A non-empty array A consisting of N integers is given.

The leader of this array is the value that occurs in more than half of the elements of A.

An equi leader is an index S such that 0 ≤ S < N − 1 and two sequences A[0], A[1], ..., A[S] and A[S + 1], A[S + 2], ..., A[N − 1] have leaders of the same value.

For example, given array A such that:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
we can find two equi leaders:

0, because sequences: (4) and (3, 4, 4, 4, 2) have the same leader, whose value is 4.
2, because sequences: (4, 3, 4) and (4, 4, 2) have the same leader, whose value is 4.
The goal is to count the number of equi leaders.

Write a function:

function solution(A);

that, given a non-empty array A consisting of N integers, returns the number of equi leaders.

For example, given:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
the function should return 2, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].

====Answer====

function solution(A) {
    // leader는 A 배열의 과반수가 넘어야 선정될 수 있다.
    // equi leader는 조건을 만족해야한다.
    // - A[0] ~ A[S]와 
    //   A[S+1] ~ A[N-1] 두가지 배열 모두 leader의 수가 과반수가 넘어야한다.
    let answer = 0;
    const halfLength = Math.trunc(A.length/2);
    // leader 값 구하기
    let map = new Map();
    for(let i = 0, len = A.length; i < len; i++) {
        const key = A[i];
        if(map.has(key)) map.get(key).push(i);
        else map.set(key, [i]);
    }
    let leader = 0;
    let valueOfLeader = [];
    for(let [key, value] of map) {
        if(value.length > halfLength) {
            leader = key;
            valueOfLeader = value;
            break;
        }
    }
    // leader의 값이 0 이하면 0을 리턴
    if(valueOfLeader.length <= 0) return 0;
    // A 배열을 순회하여 두 가지 배열이 조건을 만족하는지 확인하여 Answer를 증가시킨다.
    let count = 0;
    let countRemain = valueOfLeader.length;
    for(let i = 0, len = A.length; i < len; i++) {
        if(A[i] === leader) {
            count++;
            countRemain--;
        }
        if(count > (i+1)/2 &&
           countRemain > (len-i-1)/2) answer++;
    }

    return answer;
}

====Comment====
Detected time complexity:
O(N)

https://app.codility.com/demo/results/trainingBK7Q8H-A49/

복잡하게 생각해서 코드도 복잡하게 나온 것 같다. 필요한 데이터를 뽑아서 효율적으로 처리할 수 있도록 노력하자.
