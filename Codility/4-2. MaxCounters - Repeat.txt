====Question====
https://app.codility.com/programmers/lessons/4-counting_elements/max_counters/
====Answer====
function solution(N, A) {
    const result = A.reduce((result, value) => {
        if(value === N+1) {
            result.maxCounter = result.maxValue;
        }
        else {
            if(result.maxCounter > result.arr[value-1]) {
                result.arr[value-1] = result.maxCounter;
            }
            result.arr[value-1]++;
            result.maxValue = Math.max(result.arr[value-1], result.maxValue);
        }
        return result;
    }, {
        arr : new Array(N).fill(0),
        maxValue : 0,
        maxCounter : 0,
    });
    return result.arr.map(value => {
        return result.maxCounter > value ? result.maxCounter : value;
    })
}
====Comment====
https://app.codility.com/demo/results/trainingGYCZT5-2GB/
A = [3,4,4,6,1,4,4], N = 5라고 해보자.
A의 값에 따라서 새로운 배열에 있는 인덱스에 값을 더한다.
새로운 배열을 B라고 한다면, B의 길이는 N이다.
A = 3일 때,
  B = [0, 0, 1, 0, 0]이다.
이런 방식으로 쭉 계산하고, N+1에 해당하는 값이 나타날때, B 배열 중에서 가장 큰 값을 maxCounter로 집어넣는다.
즉, B의 모든 배열을 가장 큰 값으로 채우는 것이다.
하지만 매번 maxCounter가 나타날 때마다 모든 배열을 채우기에는 너무 비효율적이다.
그래서 해당 인덱스에 있는 값을 maxCounter보다 크거나 같으면, 1만큼 증가시키지만
maxCounter보다 작으면 maxCounter+1을 대입시킨다.
그렇게 모두 계산한다면, B = [3, 0, 1, 4, 0]이 될 것이며, maxCounter = 2가 될 것이다.
마지막으로 B 배열을 모두 순회하여, maxCounter보다 작은 값을 모두 maxCounter로 대입시킨다.
그리고 B 배열을 반환한다.