====Question====
A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

S is empty;
S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, the string "{[()()]}" is properly nested but "([)()]" is not.

Write a function:

function solution(S);

that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..200,000];
string S consists only of the following characters: "(", "{", "[", "]", "}" and/or ")".

====Answer====

function solution(S) {
    /* TRUE 
    1. S is empty
    2. () [] {}
    */
    let answer = 0;
    let stack = [];
    for(let i = 0, len = S.length; i < len; i++) {
        const element = S[i];
        if(element === "{" || element === "[" || element === "(") {
            stack.push(element);
        } else {
            const stackElement = stack[stack.length-1];
            if(stackElement === "{" && element ==="}") stack.pop();
            else if(stackElement === "[" && element ==="]") stack.pop();
            else if(stackElement === "(" && element ===")") stack.pop();
            else return 0;
        }
    }

    return stack.length > 0 ? 0 : 1;
}
Detected time complexity:
O(N)
https://app.codility.com/demo/results/trainingK47RCG-MJN/

====Comment====
스택에 원소가 있을 때를 생각안해서 처음에 정답률이 87%가 나왔다.
마지막에 스택에 원소가 있을 때 0을 리턴하는 것으로 바꿔서 100%를 맞췄다.
항상 빈 배열이나 pop되지않는 경우를 생각하여 문제를 풀이하자.
