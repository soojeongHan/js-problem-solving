====Question====
A prime is a positive integer X that has exactly two distinct divisors: 1 and X. The first few prime integers are 2, 3, 5, 7, 11 and 13.

A prime D is called a prime divisor of a positive integer P if there exists a positive integer K such that D * K = P. For example, 2 and 5 are prime divisors of 20.

You are given two positive integers N and M. The goal is to check whether the sets of prime divisors of integers N and M are exactly the same.

For example, given:

N = 15 and M = 75, the prime divisors are the same: {3, 5};
N = 10 and M = 30, the prime divisors aren't the same: {2, 5} is not equal to {2, 3, 5};
N = 9 and M = 5, the prime divisors aren't the same: {3} is not equal to {5}.
Write a function:

function solution(A, B);

that, given two non-empty arrays A and B of Z integers, returns the number of positions K for which the prime divisors of A[K] and B[K] are exactly the same.

For example, given:

    A[0] = 15   B[0] = 75
    A[1] = 10   B[1] = 30
    A[2] = 3    B[2] = 5
the function should return 1, because only one pair (15, 75) has the same set of prime divisors.

Write an efficient algorithm for the following assumptions:

Z is an integer within the range [1..6,000];
each element of arrays A, B is an integer within the range [1..2,147,483,647].

====Answer====
function solution(A, B) {
    let prime = 0;
    for(let i = 0, N = A.length; i < N; i++) {
        if(isSameDivisors(A[i], B[i])) {
            prime++;
        }
    }
    return prime;
}

function isSameDivisors(a,b) {
    const gcd_ab = gcd(a,b);
    let gcd_a = 0;
    let gcd_b = 0;
    
    while(gcd_a !== 1) {
        gcd_a = gcd(a,gcd_ab);
        a /= gcd_a;
    }
    while(gcd_b !== 1) {
        gcd_b = gcd(b,gcd_ab);
        b /= gcd_b;
    }
    
    return (a===1 && b===1) ? true : false;
    
}

function gcd(a,b) {
    while(b !== 0) {
        let r = a%b;
        a = b;
        b = r;
    }
    return a;
}
====Comment====
https://app.codility.com/demo/results/training5KRNP7-GCF/
Detected time complexity:
O(Z * log(max(A) + max(B))**2)



function solution(A, B) {
    const N = A.length;
    let prime = 0;
    outer : for(let i = 0; i < N; i++) {
        // A[i]와 B[i]가 같으면 prime 변수의 값을 증가
        if(A[i] === B[i]) {
            prime++;
            continue;
        }
        
        // Set을 이용하여 비교한다,
        // aSet = A[i]의 Set
        // bSet = B[i]의 Set
        
        
        // 최소 공약수를 이용하여 값을 나눈다.
        let valueGcd = gcd(A[i], B[i]);
        if(valueGcd === 1) continue;
        let a = A[i]/valueGcd;
        let b = B[i]/valueGcd;
        
        // gcd의 set
        let gcdSet = arrayDivision(new Set(),valueGcd);
        let aSet = new Set(arrayDivision(gcdSet,a));
        let bSet = new Set(arrayDivision(gcdSet,b));
        
        if(aSet.size !== bSet.size) continue;
        for(let value of aSet) {
            if(!bSet.has(value)) continue outer;
        }
        prime++;
    }
    return prime;
}

function gcd(a,b) {
    while(b !== 0) {
        const r = a%b;
        a = b;
        b = r;
    }
    return a;
}

function arrayDivision(sets ,x) {
    for(let i = 2; i*i < x; i++) {
        if(x%i === 0 && isPrimeNumber(i)) {
            sets.add(i);
            if(isPrimeNumber(x/i)) sets.add(x/i);
        }
    }
    if(isPrimeNumber(x)) sets.add(x);
    return sets;
}

function isPrimeNumber(x) {
    if(x <= 1) return false;
    for(let i = 2, N = x/2; i <= N; i++) {
        if(x%i===0) return false;
    }
    return true;
}
Task Score : 30%로 너무 비효율적이다.
