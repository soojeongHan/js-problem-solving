====Question====
Write a function

function solution(A);

that, given an array A consisting of N integers, returns the number of distinct values in array A.

For example, given array A consisting of six elements such that:

 A[0] = 2    A[1] = 1    A[2] = 1
 A[3] = 2    A[4] = 3    A[5] = 1
the function should return 3, because there are 3 distinct values appearing in array A, namely 1, 2 and 3.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].

====Answer====
Ver 1.
function solution(A) {
    return new Set(A).size;
}
Detected time complexity:
O(N*log(N)) or O(N)

Ver 2.
function solution(A) {
    let answer = 0;
    A.sort((a,b) => a-b);
    for(let i = 0, len = A.length; i < len; i++) {
        if(A[i] !== A[i+1]) answer++;
    }
    return answer;
}
Detected time complexity:
O(N*log(N)) or O(N)

====Comment====

저 문제는 겹치지않는 숫자의 갯수를 세서 Return하면 되는 문제라 Set을 써봤는데 깔끔하게 나왔다.
하지만 문제의 의도는 Sort를 써서 풀이하는 것이기 때문에, Sort를 사용하였다.
