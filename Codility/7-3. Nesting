====Question====
A string S consisting of N characters is called properly nested if:

S is empty;
S has the form "(U)" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, string "(()(())())" is properly nested but string "())" isn't.

Write a function:

function solution(S);

that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.

For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..1,000,000];
string S consists only of the characters "(" and/or ")".

====Answer====
function solution(S) {
    let stack = [];
    
    for(let i = 0, len = S.length; i < len; i++) {
        let value = S.charAt(i);
        if(value === "(") stack.push(value);
        else {
            if(stack.pop()!=="(") return 0;
        }
    }
    
    return stack.length > 0 ? 0 : 1;
}

====Comment====
Detected time complexity:
O(N)
https://app.codility.com/demo/results/trainingJ4VNMN-CJE/

처음에 stack이 비어있음을 체크해야하는데, 체크하지 못해서 75%의 Total Score가 나왔다.
바로 stack.length로 체크하여 처리했다.
