====Question====
A non-empty array A consisting of N integers is given. Array A represents numbers on a tape.

Any integer P, such that 0 < P < N, splits this tape into two non-empty parts: A[0], A[1], ..., A[P − 1] and A[P], A[P + 1], ..., A[N − 1].

The difference between the two parts is the value of: |(A[0] + A[1] + ... + A[P − 1]) − (A[P] + A[P + 1] + ... + A[N − 1])|

In other words, it is the absolute difference between the sum of the first part and the sum of the second part.

For example, consider array A such that:

  A[0] = 3
  A[1] = 1
  A[2] = 2
  A[3] = 4
  A[4] = 3
We can split this tape in four places:

P = 1, difference = |3 − 10| = 7
P = 2, difference = |4 − 9| = 5
P = 3, difference = |6 − 7| = 1
P = 4, difference = |10 − 3| = 7
Write a function:

function solution(A);

that, given a non-empty array A of N integers, returns the minimal difference that can be achieved.

For example, given:

  A[0] = 3
  A[1] = 1
  A[2] = 2
  A[3] = 4
  A[4] = 3
the function should return 1, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [2..100,000];
each element of array A is an integer within the range [−1,000..1,000].

====Answer====

function solution(A) {
    let answer = Number.MAX_VALUE;
    const reducer = (i, j) => i + j;
    let startSumValue = 0;
    let endSumValue = A.reduce(reducer);
    
    for(let i = 0, len = A.length; i<len-1; i++) {
        startSumValue += A[i];
        endSumValue -= A[i];
        const value = Math.abs(startSumValue - endSumValue);
        if(value < answer) 
            answer = value;
    }
    
    return answer;
}

Detected time complexity : O(N)

====Comment====
function solution(A) {
    let leftNum = 0;
    let rightNum = A.reduce((a,b) => a+b);
    let answer = null;
    for (let i=0; i<A.length-1; i++) {
        leftNum += A[i];
        rightNum -= A[i];
        const diff = Math.abs(leftNum - rightNum)
        if (answer === null || answer > diff) {
            answer = diff
        }
    }
    return answer
}
출처 : https://gist.github.com/jeanlescure/797eef515cfa4a05830b

비슷하게 미리 우변의 합을 구한다. 좌변과 우변을 비교한다.
