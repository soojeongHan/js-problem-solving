====Question====

You are given N counters, initially set to 0, and you have two possible operations on them:

increase(X) − counter X is increased by 1,
max counter − all counters are set to the maximum value of any counter.
A non-empty array A of M integers is given. This array represents consecutive operations:

if A[K] = X, such that 1 ≤ X ≤ N, then operation K is increase(X),
if A[K] = N + 1 then operation K is max counter.
For example, given integer N = 5 and array A such that:

    A[0] = 3
    A[1] = 4
    A[2] = 4
    A[3] = 6
    A[4] = 1
    A[5] = 4
    A[6] = 4
the values of the counters after each consecutive operation will be:

    (0, 0, 1, 0, 0)
    (0, 0, 1, 1, 0)
    (0, 0, 1, 2, 0)
    (2, 2, 2, 2, 2)
    (3, 2, 2, 2, 2)
    (3, 2, 2, 3, 2)
    (3, 2, 2, 4, 2)
The goal is to calculate the value of every counter after all operations.

Write a function:

function solution(N, A);

that, given an integer N and a non-empty array A consisting of M integers, returns a sequence of integers representing the values of the counters.

Result array should be returned as an array of integers.

For example, given:

    A[0] = 3
    A[1] = 4
    A[2] = 4
    A[3] = 6
    A[4] = 1
    A[5] = 4
    A[6] = 4
the function should return [3, 2, 2, 4, 2], as explained above.

Write an efficient algorithm for the following assumptions:

N and M are integers within the range [1..100,000];
each element of array A is an integer within the range [1..N + 1].

====Answer====

function solution(N, A) {
    let answer = new Array(N).fill(0);
    let maxCounter = 0;
    let maxCounterAll = 0;
    for(let i = 0, len = A.length; i<len; i++) {
        const indexOfValue = A[i]-1;
        if(indexOfValue !== N) {
            if(maxCounterAll > answer[indexOfValue]) {
                answer[indexOfValue] = maxCounterAll + 1;
            } else {
                answer[indexOfValue]++;
            }
            if(answer[indexOfValue] > maxCounter) maxCounter = answer[indexOfValue];
        } else {
            maxCounterAll = maxCounter;
        }
    }
    
    return answer.map(value => value<maxCounterAll ? maxCounterAll : value);
}

====Comment====

function solution(N, A) {
  var M = A.length; // Length of the entry array
  var C = []; // Counters
  var H = 0; // Highest counter
  var PH = 0; // Previously recorded highest counter
  
  for(K = 0; K < N; K++) { // Initialize the array
    C[K] = 0;
  }
        
  // If you're having trouble understanding the problem, here's an
  // explanation. The array you are receiving has instructions as
  // to how perform mutations on an existing array. For instance,
  // if the first element of the array is 3, that means you need
  // to increment the third counter by 1 (C[3] + 1). Your array 
  // would then look like [0, 0, 1, 0, 0]. Technically, we don't need
  // N, but there is another rule where if the array element is
  // equal to N + 1 then your counters will need to set to the
  // highest counter value.
  for(K = 0; K < M; K++) { // Iterate through the array (M = A.length)
    // If the element is not N + 1, we need to increase a specific counter
    if (A[K] !== N + 1) { 
      // Increase the counter designated. We will need to subtract 1
      // because arrays start at 0, not 1.
      C[A[K] - 1]++; 
      // Let's keep track of the highest counter we have reached and
      // assign it to the variable H.
      if (H < C[A[K] - 1]) H = C[A[K] - 1];        
      continue;
    }
    
    // This is an optimization. Basically, in large arrays with huge
    // amounts of max counters, you will be performing O(N + M) operations
    // constantly because you will need to assign every counter to the
    // maximum over and over. We can solve this problem by keeping track 
    // of the previous maximum counter and if it changes, then we know we
    // need to iterate through the counters and set the maximum.
    if (H === PH) continue;
        
    // Iterate through the counters and assign the maximum. This operation is
    // O(N + M), so we need to make sure to call this the least amount possible.
    // If we've reached this point, we can be sure that it's a maximum counter
    // operation.
    for(J = 0; J < N; J++) C[J] = PH = H;
  }
  
  // Return the counters
  return C;
}
출처 : https://app.codility.com/demo/results/training47WBBU-CPE/
이런 방식으로 푸는 사람도 있었다. 내가 풀이했던 것과 마찬가지로 N+M의 시간복잡도를 가진다.
